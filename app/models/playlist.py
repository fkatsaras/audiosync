# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict, TYPE_CHECKING # noqa: F401

from app.models.base_model_ import Model
#from app.models.song import Song # noqa: F401,E501
from app import util

if TYPE_CHECKING:
    from app.models.song import Song

class Playlist(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, title: str=None, songs: List['Song']=None, edit_mode: bool=None):  # noqa: E501
        """Playlist - a model defined in Swagger

        :param id: The id of this Playlist.  # noqa: E501
        :type id: int
        :param title: The title of this Playlist.  # noqa: E501
        :type title: str
        :param songs: The songs of this Playlist.  # noqa: E501
        :type songs: List[Song]
        :param edit_mode: The edit_mode of this Playlist.  # noqa: E501
        :type edit_mode: bool
        """
        self.swagger_types = {
            'id': int,
            'title': str,
            'songs': List['Song'], # Using string to defer evluation
            'edit_mode': bool
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'songs': 'songs',
            'edit_mode': 'editMode'
        }
        self._id = id
        self._title = title
        self._songs = songs
        self._edit_mode = edit_mode

    @property
    def songs(self):
        if not hasattr(self, '_songs'):
            from app.models.song import Song # Lazy import
            self._songs = []
        return self._songs

    @classmethod
    def from_dict(cls, dikt) -> 'Playlist':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Playlist of this Playlist.  # noqa: E501
        :rtype: Playlist
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Playlist.

        Unique identifier for the playlist  # noqa: E501

        :return: The id of this Playlist.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Playlist.

        Unique identifier for the playlist  # noqa: E501

        :param id: The id of this Playlist.
        :type id: int
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Playlist.

        Title of the playlist  # noqa: E501

        :return: The title of this Playlist.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Playlist.

        Title of the playlist  # noqa: E501

        :param title: The title of this Playlist.
        :type title: str
        """

        self._title = title

    @property
    def songs(self) -> List['Song']: # Using string to defer evaluation
        """Gets the songs of this Playlist.

        List of Song objects that the playlist contains  # noqa: E501

        :return: The songs of this Playlist.
        :rtype: List[Song]
        """
        return self._songs

    @songs.setter
    def songs(self, songs: List['Song']): # Using string to defer evaluation
        """Sets the songs of this Playlist.

        List of Song objects that the playlist contains  # noqa: E501

        :param songs: The songs of this Playlist.
        :type songs: List[Song]
        """

        self._songs = songs

    @property
    def edit_mode(self) -> bool:
        """Gets the edit_mode of this Playlist.

        Flag indicating if the user can edit the playlist  # noqa: E501

        :return: The edit_mode of this Playlist.
        :rtype: bool
        """
        return self._edit_mode

    @edit_mode.setter
    def edit_mode(self, edit_mode: bool):
        """Sets the edit_mode of this Playlist.

        Flag indicating if the user can edit the playlist  # noqa: E501

        :param edit_mode: The edit_mode of this Playlist.
        :type edit_mode: bool
        """

        self._edit_mode = edit_mode
